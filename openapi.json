{
  "openapi": "3.0.0",
  "info": {
    "title": "Avalara Shipping Verification for Beverage Alcohol",
    "description": "API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.",
    "version": "2.2.0"
  },
  "security": [
    {
      "BasicAuth": []
    },
    {
      "Bearer": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "A Bearer token generated by Avalara Identity. Prefix your token with the string \\'Bearer \\'."
      }
    },
    "parameters": {
      "versionQueryParameter": {
        "name": "api-version",
        "in": "query",
        "required": false,
        "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2",
        "schema": {
          "$ref": "#/components/schemas/ApiVersionSchema"
        }
      },
      "versionHeaderParameter": {
        "name": "x-avalara-version",
        "in": "header",
        "required": false,
        "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2. Header takes precendence if both header and query parameters are present.",
        "schema": {
          "$ref": "#/components/schemas/ApiVersionSchema"
        }
      }
    },
    "schemas": {
      "ApiVersionSchema": {
        "type": "string",
        "enum": [
          2.1,
          2.2
        ]
      },
      "FailureCodes": {
        "type": "string",
        "enum": [
          "BelowLegalDrinkingAge",
          "ShippingProhibitedToAddress",
          "MissingRequiredLicense",
          "VolumeLimitExceeded",
          "InvalidFieldValue",
          "MissingRequiredField",
          "InvalidFieldType",
          "InvalidFormat",
          "InvalidDate",
          "AlcoholContentLimitExceeded"
        ]
      },
      "ShippingVerifyResult": {
        "description": "The Response of the /shippingverify endpoint. Describes the result of checking all applicable shipping rules against each line in the transaction.",
        "type": "object",
        "properties": {
          "compliant": {
            "type": "boolean",
            "description": "Whether every line in the transaction is compliant."
          },
          "message": {
            "type": "string",
            "description": "A short description of the result of the compliance check."
          },
          "successMessages": {
            "type": "string",
            "description": "A detailed description of the result of each of the passed checks made against this transaction, separated by line."
          },
          "failureMessages": {
            "type": "string",
            "description": "A detailed description of the result of each of the failed checks made against this transaction, separated by line."
          },
          "failureCodes": {
            "type": "array",
            "description": "An enumeration of all the failure codes received across all lines. Note: AlcoholContentLimitExceeded is included in API versions 2.2 and later.",
            "items": {
              "$ref": "#/components/schemas/FailureCodes"
            }
          },
          "warningCodes": {
            "type": "array",
            "description": "An enumeration of all the warning codes received across all lines that a determination could not be made for.",
            "items": {
              "type": "string",
              "enum": [
                "UnsupportedTaxCode",
                "UnsupportedAddress"
              ]
            }
          },
          "lines": {
            "type": "array",
            "description": "Describes the results of the checks made for each line in the transaction.",
            "items": {
              "type": "object",
              "properties": {
                "resultCode": {
                  "type": "string",
                  "enum": [
                    "Compliant",
                    "NotCompliant",
                    "UnsupportedTaxCode",
                    "UnsupportedAddress",
                    "InvalidLine"
                  ],
                  "description": "Describes whether the line is compliant or not. In cases where a determination could not be made, resultCode will provide the reason why."
                },
                "lineNumber": {
                  "type": "string",
                  "description": "The lineNumber of the line evaluated."
                },
                "message": {
                  "type": "string",
                  "description": "A short description of the result of the checks made against this line."
                },
                "successMessages": {
                  "type": "string",
                  "description": "A detailed description of the result of each of the passed checks made against this line."
                },
                "failureMessages": {
                  "type": "string",
                  "description": "A detailed description of the result of each of the failed checks made against this line."
                },
                "failureCodes": {
                  "type": "array",
                  "description": "An enumeration of all the failure codes received for this line. Note: AlcoholContentLimitExceeded is included in API versions 2.2 and later.",
                  "items": {
                    "$ref": "#/components/schemas/FailureCodes"
                  }
                }
              }
            }
          }
        },
        "example": {
          "compliant": "true,",
          "message": "Transaction is Compliant",
          "successMessages": "Line \"0001\": The recipient is older than 21 years of age. A current license exists for Washington. Line \"0002\": The recipient is older than 21 years of age. A current license exists for Maui County, HI.",
          "failureMessages": "",
          "failureCodes": [],
          "warningCodes": [],
          "lines": [
            {
              "resultCode": "Compliant",
              "lineNumber": "0001",
              "message": "Item is Compliant",
              "successMessages": "The recipient is older than 21 years of age. A current license exists for Washington",
              "failureMessages": "",
              "failureCodes": []
            },
            {
              "resultCode": "Compliant",
              "lineNumber": "0002",
              "message": "Item is Compliant",
              "successMessages": "The recipient is older than 21 years of age. A current license exists for Maui County, HI.",
              "failureMessages": "",
              "failureCodes": []
            }
          ]
        }
      },
      "ErrorDetails": {
        "description": "Message Object",
        "type": "object",
        "properties": {
          "error": {
            "description": "An object holding details about the error.",
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Name of the error or message.",
                "enum": [
                  "AuthenticationException",
                  "SubscriptionRequired",
                  "ServerConfiguration",
                  "InvalidAddress",
                  "EntityNotFoundError"
                ],
                "example": "InvalidAddress"
              },
              "message": {
                "type": "string",
                "description": "Concise summary of the message, suitable for display in the caption of an alert box.",
                "example": "The address is not deliverable."
              },
              "details": {
                "description": "Message Details Object",
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Name of the error or message.",
                    "enum": [
                      "AuthenticationException",
                      "SubscriptionRequired",
                      "UnhandledException",
                      "InvalidAddress",
                      "EntityNotFoundError"
                    ],
                    "example": "InvalidAddress"
                  },
                  "message": {
                    "type": "string",
                    "description": "Concise summary of the message, suitable for display in the caption of an alert box.",
                    "example": "The address is not deliverable."
                  },
                  "number": {
                    "type": "integer",
                    "description": "Unique ID number referring to this error or message.",
                    "example": 309
                  },
                  "description": {
                    "type": "string",
                    "description": "A more detailed description of the problem referenced by this error message, suitable for display in the contents area of an alert box.",
                    "example": "The physical location exists but there are no homes on this street. One reason might be railroad tracks or rivers running alongside this street, as they would prevent construction of homes in this location."
                  },
                  "faultCode": {
                    "type": "string",
                    "description": "Indicates the SOAP Fault code, if this was related to an error that corresponded to AvaTax SOAP v1 behavior.",
                    "example": "Client"
                  },
                  "helpLink": {
                    "type": "string",
                    "description": "URL to help for this message",
                    "example": "http://developer.avalara.com/avatax/errors/InvalidAddress"
                  },
                  "severity": {
                    "type": "string",
                    "description": "Severity of the message",
                    "enum": [
                      "Error"
                    ],
                    "example": "Error"
                  }
                }
              }
            }
          }
        },
        "example": {
          "error": {
            "code": "InvalidAddress",
            "message": "The address is not deliverable.",
            "details": [
              {
                "code": "InvalidAddress",
                "number": 309,
                "message": "The address is not deliverable.",
                "description": "The physical location exists but there are no homes on this street. One reason might be railroad tracks or rivers running alongside this street, as they would prevent construction of homes in this location.",
                "faultCode": "Client",
                "helpLink": "http://developer.avalara.com/avatax/errors/InvalidAddress",
                "severity": "Error"
              }
            ]
          }
        }
      },
      "AgeVerifyRequest": {
        "description": "The Request for the /ageVerification/verify endpoint. Describes information about the person whose age is being verified.",
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "line1": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "region": {
                "type": "string",
                "description": "The state code of the address."
              },
              "country": {
                "type": "string",
                "description": "The country code of the address.",
                "enum": [
                  "US",
                  "USA"
                ]
              },
              "postalCode": {
                "type": "string"
              }
            }
          },
          "DOB": {
            "type": "string",
            "description": "The value should be ISO-8601 compliant (e.g. 2020-07-21)."
          }
        },
        "example": {
          "firstName": "John",
          "lastName": "Doe",
          "address": {
            "line1": "255 S King St",
            "city": "Seattle",
            "region": "WA",
            "country": "US",
            "postalCode": "98104"
          },
          "DOB": "1994-10-01"
        }
      },
      "AgeVerifyFailureCode": {
        "type": "string",
        "enum": [
          "not_found",
          "dob_unverifiable",
          "under_age",
          "suspected_fraud",
          "deceased",
          "unknown_error"
        ]
      },
      "AgeVerifyResult": {
        "description": "The Result of a call to the /ageVerification/verify endpoint.",
        "type": "object",
        "properties": {
          "isOfAge": {
            "type": "boolean",
            "description": "Describes whether the individual meets or exceeds the minimum legal drinking age."
          },
          "failureCodes": {
            "type": "array",
            "description": "A list of failure codes describing why a *false* age determination was made.",
            "items": {
              "$ref": "#/components/schemas/AgeVerifyResult"
            }
          }
        },
        "example": {
          "isOfAge": false,
          "failureCodes": [
            "deceased",
            "dob_unverifiable"
          ]
        }
      }
    }
  },
  "paths": {
    "/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/registration": {
      "put": {
        "tags": [
          "Shipping Verification"
        ],
        "summary": "Registers the transaction so that it may be included when evaluating regulations that span multiple transactions.",
        "operationId": "registerShipment",
        "parameters": [
          {
            "name": "companyCode",
            "in": "path",
            "required": true,
            "description": "The company code of the company that recorded the transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionCode",
            "in": "path",
            "required": true,
            "description": "The transaction code to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "(Optional): The document type of the transaction to operate on. If omitted, defaults to \"SalesInvoice\"",
            "schema": {
              "type": "string",
              "enum": [
                "SalesInvoice",
                "ReturnInvoice"
              ]
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          },
          {
            "name": "x-avalara-version",
            "in": "header",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2. Header takes precendence if both header and query parameters are present.",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "InvalidApiVersion"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Invalid Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Shipping Verification"
        ],
        "summary": "Removes the transaction from consideration when evaluating regulations that span multiple transactions.",
        "operationId": "deregisterShipment",
        "parameters": [
          {
            "name": "companyCode",
            "in": "path",
            "required": true,
            "description": "The company code of the company that recorded the transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionCode",
            "in": "path",
            "required": true,
            "description": "The transaction code to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "(Optional): The document type of the transaction to operate on. If omitted, defaults to \"SalesInvoice\"",
            "schema": {
              "type": "string",
              "enum": [
                "SalesInvoice",
                "ReturnInvoice"
              ]
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          },
          {
            "name": "x-avalara-version",
            "in": "header",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2. Header takes precendence if both header and query parameters are present.",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "InvalidApiVersion"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Invalid Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/registerIfCompliant": {
      "put": {
        "tags": [
          "Shipping Verification"
        ],
        "summary": "Evaluates a transaction against a set of direct-to-consumer shipping regulations and, if compliant, registers the transaction so that it may be included when evaluating regulations that span multiple transactions.",
        "operationId": "registerShipmentIfCompliant",
        "parameters": [
          {
            "name": "companyCode",
            "in": "path",
            "required": true,
            "description": "The company code of the company that recorded the transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionCode",
            "in": "path",
            "required": true,
            "description": "The transaction code to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "(Optional): The document type of the transaction to operate on. If omitted, defaults to \"SalesInvoice\"",
            "schema": {
              "type": "string",
              "enum": [
                "SalesInvoice",
                "ReturnInvoice"
              ]
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          },
          {
            "name": "x-avalara-version",
            "in": "header",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2. Header takes precendence if both header and query parameters are present.",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A ShippingVerifyResult object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingVerifyResult"
                }
              }
            }
          },
          "400": {
            "description": "InvalidApiVersion"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Invalid Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/companies/{companyCode}/transactions/{transactionCode}/shipment/verify": {
      "get": {
        "tags": [
          "Shipping Verification"
        ],
        "summary": "Evaluates a transaction against a set of direct-to-consumer shipping regulations.",
        "operationId": "verifyShipment",
        "description": "The transaction and its lines must meet the following criteria in order to be evaluated:\n* The transaction must be recorded. Using a type of *SalesInvoice* is recommended.\n* A parameter with the name *AlcoholRouteType* must be specified and the value must be one of the following: '*DTC*', '*Retailer DTC*'\n* A parameter with the name *RecipientName* must be specified and the value must be the name of the recipient.\n* Each alcohol line must include a *ContainerSize* parameter that describes the volume of a single container. Use the *unit* field to specify one of the following units: '*Litre*', '*Millilitre*', '*gallon (US fluid)*', '*quart (US fluid)*', '*ounce (fluid US customary)*'\n* Each alcohol line must include a *PackSize* parameter that describes the number of containers in a pack. Specify *Count* in the *unit* field.\n* Each alcohol line must include a  *AlcoholContent* parameter that describes the alcohol percentage by volume of the item. Specify *Percentage* in the *unit* field. If unable to provide this parameter, use version 2.1 of the API.\n\nOptionally, the transaction and its lines may use the following parameters:\n* The *ShipDate* parameter may be used if the date of shipment is different than the date of the transaction. The value should be ISO-8601 compliant (e.g. 2020-07-21).\n* The *RecipientDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21).\n* The *PurchaserDOB* parameter may be used to evaluate age restrictions. The value should be ISO-8601 compliant (e.g. 2020-07-21).\n* The *SalesLocation* parameter may be used to describe whether the sale was made *OnSite* or *OffSite*. *OffSite* is the default value.\n\n**Security Policies**\nThis API depends on all of the following active subscriptions: *AvaAlcohol, AutoAddress, AvaTaxPro*",
        "parameters": [
          {
            "name": "companyCode",
            "in": "path",
            "required": true,
            "description": "The company code of the company that recorded the transaction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionCode",
            "in": "path",
            "required": true,
            "description": "The transaction code to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "(Optional): The document type of the transaction to operate on. If omitted, defaults to \"SalesInvoice\"",
            "schema": {
              "type": "string",
              "enum": [
                "SalesInvoice",
                "ReturnInvoice"
              ]
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          },
          {
            "name": "x-avalara-version",
            "in": "header",
            "required": false,
            "description": "(Optional): API version that should satisfy the request. If omitted, defaults to 2.2. Header takes precendence if both header and query parameters are present.",
            "schema": {
              "$ref": "#/components/schemas/ApiVersionSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A ShippingVerifyResult object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingVerifyResult"
                }
              }
            }
          },
          "400": {
            "description": "InvalidApiVersion"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Invalid Transaction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/ageverification/verify": {
      "post": {
        "tags": [
          "Age Verification"
        ],
        "summary": "Determines whether an individual meets or exceeds the minimum legal drinking age.",
        "operationId": "verifyAge",
        "description": "The request must meet the following criteria in order to be evaluated:\n* *firstName*, *lastName*, and *address* are required fields.\n* One of the following sets of attributes are required for the *address*:\n  * *line1, city, region*\n  * *line1, postalCode*\n\nOptionally, the transaction and its lines may use the following parameters:\n* A *DOB* (Date of Birth) field. The value should be ISO-8601 compliant (e.g. 2020-07-21).\n* Beyond the required *address* fields above, a *country* field is permitted\n  * The valid values for this attribute are [*US, USA*]\n\n**Security Policies**\nThis API depends on the active subscription *AgeVerification*",
        "requestBody": {
          "description": "Information about the individual whose age is being verified.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgeVerifyRequest"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "simulatedFailureCode",
            "in": "query",
            "description": "(Optional) The failure code included in the simulated response of the endpoint. Note that this endpoint is only available in Sandbox for testing purposes.",
            "schema": {
              "$ref": "#/components/schemas/AgeVerifyFailureCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An AgeVerificationResult object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeVerifyResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request Model"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  }
}